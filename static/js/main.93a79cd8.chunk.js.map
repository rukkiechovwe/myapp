{"version":3,"sources":["todoApp.js","App.js","serviceWorker.js","index.js"],"names":["Functionality","deleteTask","completeTask","href","onClick","icon","faTrashAlt","faCheckCircle","Todo","task","style","textDecoration","done","text","TodoList","tasks","map","i","key","id","TodoApp","props","addTodo","e","myTodos","state","todo","inputRef","value","Date","now","push","setState","window","localStorage","setItem","JSON","stringify","preventDefault","React","createRef","bind","this","current","focus","list","getItem","parsedList","parse","index","length","confirm","splice","className","onSubmit","type","placeholder","ref","a","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93a79cd8.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './todo.css';\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCheckCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nconst Functionality = ({deleteTask,completeTask}) => {\r\n    return (\r\n        <div>\r\n            <a href=\"#\" onClick={ deleteTask }><FontAwesomeIcon icon={faTrashAlt}/></a>\r\n            <a href=\"#\" onClick={completeTask}><FontAwesomeIcon icon={faCheckCircle}/></a>\r\n        </div>\r\n   )\r\n}\r\nconst Todo = ({task, deleteTask,completeTask}) => {\r\n    return (\r\n        <li>\r\n            <p style={{textDecoration: task.done ? \"line-through\": \"none\"}}>{task.text}</p>\r\n            <Functionality deleteTask={deleteTask} completeTask={completeTask}/>\r\n        </li>\r\n    )\r\n}\r\nconst TodoList = ({ tasks, deleteTask,completeTask}) => {\r\n    return (\r\n        <ul>\r\n            <h3>Tasks</h3>\r\n            {tasks.map((task,i)=> <Todo task={task} key={task.id} completeTask={() => completeTask(i)} deleteTask={() => deleteTask(i)} />)}\r\n        </ul>\r\n    )}\r\n\r\nclass TodoApp extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tasks: []\r\n        }\r\n        this.inputRef = React.createRef();\r\n        this.addTodo = this.addTodo.bind(this);\r\n    }\r\n\r\n    focusInput() {\r\n        this.inputRef.current.focus();\r\n    }\r\n\r\n    addTodo = (e) => {\r\n        let myTodos = this.state.tasks\r\n        const todo = {\r\n            text: this.inputRef.value, id: Date.now(),\r\n            done:false\r\n        }\r\n        if (this.inputRef.value !== \"\") {\r\n            myTodos.push(todo)\r\n            this.inputRef.value=\"\"\r\n        }\r\n        //console.log(myTodos)\r\n        this.setState({\r\n            tasks: myTodos\r\n        }, () => {\r\n            window.localStorage.setItem('myTodos', JSON.stringify(myTodos));\r\n        })\r\n        \r\n        e.preventDefault();\r\n    }\r\n    componentDidMount() {\r\n          const list = window.localStorage.getItem('myTodos');\r\n          const parsedList = JSON.parse(list);\r\n          this.setState({\r\n              tasks: parsedList === null ? []:parsedList,\r\n          })\r\n      }\r\n    \r\n    completeTask(index) {\r\n        const { tasks } = this.state;\r\n        for(let i = 0;i <= tasks.length;i ++) {\r\n          if(index === i) {\r\n             tasks[i].done = true;\r\n              break;\r\n             }\r\n        }\r\n        //this.setState({ tasks }) \r\n        this.setState({tasks}, () => {\r\n            window.localStorage.setItem('myTodos', JSON.stringify(this.state.tasks))\r\n        })\r\n    }\r\n\r\n    deleteTask(index) {\r\n        if (window.confirm('Delete this item?')) {\r\n            const { tasks } = this.state;\r\n      tasks.splice(index, 1);\r\n\r\n      this.setState({tasks}, () => {\r\n        window.localStorage.setItem('myTodos', JSON.stringify(this.state.tasks))\r\n    })\r\n        }\r\n  } \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo\">\r\n                <form onSubmit={this.addTodo} className=\"todo-form\">\r\n                    <input type=\"text\" placeholder=\"add task for today...\" /*onChange(e=>console.log(e.target))*/ ref= {(a)=>this.inputRef = a}/>\r\n                    <button type=\"submit\" className=\"add-button\">+</button> \r\n                </form>\r\n                <TodoList tasks={this.state.tasks} deleteTask={this.deleteTask.bind(this)} completeTask={this.completeTask.bind(this)}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoApp","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport TodoApp from './todoApp'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}